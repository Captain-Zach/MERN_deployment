{"version":3,"sources":["components/InfoBar.js","pages/Dashboard.js","components/PetInput.js","pages/NewPet.js","components/PetCard.js","pages/Detail.js","pages/EditPet.js","Main.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["InfoBar","props","tagline","extras","to","linkTo","linkDesc","Dashboard","useState","pets","setPets","io","socket","useEffect","emit","on","res","console","log","msg","map","pet","index","name","type","onClick","e","preventDefault","navigate","_id","redirectHandler","editHandler","PetInput","description","skill1","skill2","skill3","value","state","onChange","changeHandler","clickHandler","buttonTag","NewPet","setState","errors","setErrors","data","target","error","PetCard","Detail","axios","get","id","then","emergencyTest","catch","err","EditPet","Main","message","path","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0cca2117.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from '@reach/router';\r\n\r\nconst InfoBar = (props) => {\r\n\r\n    return ( \r\n        <div>\r\n            <h2>{props.tagline} {props.extras}</h2>\r\n            <Link to={props.linkTo}>{props.linkDesc}</Link>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default InfoBar;\r\n\r\n// BRB ","import React, { useState, useEffect } from 'react';\r\nimport InfoBar from '../components/InfoBar';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\nconst Dashboard = (props) => {\r\n    const [pets, setPets] = useState([]);\r\n    const [socket] = useState(() => io(\":8000\"));\r\n\r\n    useEffect(() => {\r\n        // axios.get(\"http://localhost:8000/api/pets\")\r\n        //     .then(res => {\r\n        //         console.log(res.data);\r\n        //         console.log(typeof(res.data.pets));\r\n        //         setPets(res.data.pets);\r\n        //     })\r\n        //     .catch(err => console.log(err));\r\n        socket.emit(\"get_pets\", \"This can be anything\");\r\n        socket.on(\"pet_package\", res => {\r\n            setPets(res);\r\n        });\r\n        console.log(\"Does this happen every time my socket runs?\");\r\n        socket.on(\"retest_event\", msg=> {\r\n            console.log(\"Our socket is doing some work\");\r\n            console.log(msg);\r\n            socket.emit(\"get_pets\", \"Shoop da woop!\");\r\n        })\r\n    }, [])\r\n\r\n    const testHandler = e => {\r\n        socket.emit(\"test_event\", \"this could be anything\");\r\n    }\r\n\r\n    const redirectHandler = (e, pet) => {\r\n        e.preventDefault();\r\n        console.log(\"Yeetus deleetus\");\r\n        navigate(\"/pets/\"+pet._id);\r\n    }\r\n    const editHandler = (e, pet) => {\r\n        e.preventDefault();\r\n        console.log(\"Yeetus changeetus\");\r\n        navigate(\"pets/edit/\"+pet._id);\r\n    }\r\n    return ( \r\n        <div>\r\n            <InfoBar tagline=\"These pets are looking for a good home\" linkTo=\"/new\" linkDesc=\"add a pet to the shelter, you absolute monster\"/>\r\n            <p>This is where we put the table that holds all the pets.</p>\r\n            <table>\r\n                <thead>\r\n                    <th>Name</th>\r\n                    <th>Type</th>\r\n                    <th>Actions</th>\r\n                </thead>\r\n                {pets.map((pet, index) => \r\n                \r\n                    <tr>\r\n                        \r\n                        <td>{pet.name}</td>\r\n                        <td>{pet.type}</td>\r\n                        <td><Link onClick={e => redirectHandler(e, pet)} to=\"\">details</Link> | <Link onClick={e => editHandler(e, pet)} to=\"\">edit</Link></td>\r\n                    </tr>\r\n                )}\r\n            </table>\r\n            <button onClick={ testHandler}>Test Button</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Dashboard;","import React, { useState } from 'react';\r\n\r\nconst PetInput = (props) => {\r\n\r\n    const {name, type, description, skill1, skill2, skill3} = props;\r\n    // Come here when you get back from making lunch (i'm central time)\r\n    \r\n    return ( \r\n        <div>\r\n            <p>Pet input here</p>\r\n            <label>Pet Name:</label>\r\n            <input type=\"text\" name=\"name\" value={props.state.name} onChange={props.changeHandler} /><br/>\r\n            <label>Pet Type:</label>\r\n            <input type=\"text\" name=\"type\" value={props.state.type} onChange={props.changeHandler} /><br/>\r\n            <label>Pet Description:</label>\r\n            <input type=\"text\" name=\"description\" value={props.state.description} onChange={props.changeHandler} /><br/>\r\n            <label>Pet Skill 1:</label>\r\n            <input type=\"text\" name=\"skill1\" value={props.state.skill1} onChange={props.changeHandler} /><br/>\r\n            <label>Pet Skill 2:</label>\r\n            <input type=\"text\" name=\"skill2\" value={props.state.skill2} onChange={props.changeHandler} /><br/>\r\n            <label>Pet Skill 3:</label>\r\n            <input type=\"text\" name=\"skill3\" value={props.state.skill3} onChange={props.changeHandler} /><br/>\r\n            <button onClick={props.clickHandler} >{props.buttonTag}</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default PetInput;","import React, { useState, useEffect } from 'react';\r\nimport InfoBar from '../components/InfoBar';\r\nimport io from 'socket.io-client';\r\nimport PetInput from '../components/PetInput';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst NewPet = (props) => {\r\n    const [socket] = useState(() => io(\":8000\"));\r\n    const [state, setState] = useState({\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skill1: \"\",\r\n        skill2: \"\",\r\n        skill3: \"\",\r\n    })\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"not_valid\", data => {\r\n            console.log(\"your input was invalid\");\r\n            setErrors(data);\r\n        })\r\n        socket.on(\"valid\", data => {\r\n            console.log(\"you did it!\");\r\n            navigate(\"/\")\r\n        })\r\n    })\r\n\r\n    const changeHandler = e => {\r\n        console.log(\"Changing state\")\r\n        setState({\r\n            ...state,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const buttonHandler = e => {\r\n        console.log(\"handling button things\");\r\n        console.log(state)\r\n        socket.emit(\"new_pet\", state);\r\n        // axios.post(\"http://localhost:8000/api/pets/new\", {\r\n        //     ...state,\r\n        // })\r\n        //     .then(res => {\r\n        //         console.log(res);\r\n        //         navigate(\"/\");\r\n        //     })\r\n        //     .catch(err=>console.log(err));\r\n    }\r\n    return ( \r\n        <div>\r\n            <InfoBar tagline=\"Know a pet needing a home?\" linkTo=\"/\" linkDesc=\"back to home\" />\r\n            <p>Pet Input Card Below</p>\r\n            <PetInput state={state} changeHandler={changeHandler} buttonTag=\"Add New Pet\" clickHandler={buttonHandler} />\r\n            {errors.map((error, index) => \r\n                <p>{error} error number {index}</p>\r\n            )}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NewPet;","import React from 'react';\r\n\r\nconst PetCard = (props) => {\r\n    return ( \r\n        <div>\r\n            <h3>Pet type:  {props.state.type}</h3>\r\n            <h3>Description: {props.state.description}</h3>\r\n            <h3>Skills: {props.state.skill1}<br/>{props.state.skill2}<br/>{props.state.skill3}<br/></h3>\r\n\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default PetCard;","import React, { useState, useEffect } from 'react';\r\nimport InfoBar from '../components/InfoBar';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport PetInput from '../components/PetInput';\r\nimport PetCard from '../components/PetCard';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst Detail = (props) => {\r\n    const [socket] = useState(() => io(\":8000\"));\r\n    const [state, setState] = useState({\r\n        name: \"asdf\",\r\n        type: \"asdf\",\r\n        description: \"asdf\",\r\n        skill1: \"asdf\",\r\n        skill2: \"adsf\",\r\n        skill3: \"asdf\",\r\n    });\r\n\r\n    const [newState, setNewState ] = useState({});\r\n    \r\n    const emergencyTest = (res) => {\r\n        setState({\r\n            name: res.data.pet.name,\r\n            type: res.data.pet.type,\r\n            description: res.data.pet.description,\r\n            skill1: res.data.pet.skill1,\r\n            skill2: res.data.pet.skill2,\r\n            skill3: res.data.pet.skill3,\r\n        })\r\n        console.log(\"Emergency happening\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/pets/\"+props.id)\r\n            .then(res => {\r\n                emergencyTest(res)\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    \r\n    const changeHandler = e => {\r\n        console.log(\"Change handler firing\");\r\n        // setState({\r\n        //     ...state,\r\n        //     [e.target.name]: e.target.value,\r\n        // })\r\n    }\r\n\r\n    const buttonHandler = e => {\r\n        console.log(\"Button handler firing\");\r\n        socket.emit(\"delete_pet\", {id:props.id});\r\n        navigate(\"/\");\r\n        \r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <InfoBar tagline=\"Details about: \" extras={state.name} linkTo=\"/\" linkDesc=\"back to home\" />\r\n            <button onClick={buttonHandler} >Adopt {state.name}</button>\r\n            <p>This is where pet details go.</p>\r\n            <PetCard state={state} />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Detail;","import React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport PetInput from '../components/PetInput';\r\nimport InfoBar from '../components/InfoBar';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst EditPet = (props) => {\r\n    const [socket] = useState(() => io(\":8000\"));\r\n    const [state, setState] = useState({\r\n        name: \"asdf\",\r\n        type: \"asdf\",\r\n        description: \"asdf\",\r\n        skill1: \"asdf\",\r\n        skill2: \"adsf\",\r\n        skill3: \"asdf\",\r\n    });\r\n    const [errors, setErrors] = useState([]);\r\n    useEffect(() => {\r\n        socket.emit(\"only_pet\", {id:props.id});\r\n\r\n\r\n        socket.on(\"receive_pet\", data => {\r\n            console.log(\"receiving pet here\");\r\n            console.log(data);\r\n            console.log(data.name);\r\n            setState({\r\n                name: data.name,\r\n                type: data.type,\r\n                description: data.description,\r\n                skill1: data.skill1,\r\n                skill2: data.skill2,\r\n                skill3: data.skill3\r\n            })\r\n        })\r\n        socket.on(\"not_valid\", data => {\r\n            console.log(\"Data not valid\");\r\n            setErrors(data);\r\n        })\r\n        socket.on(\"valid\", data => {\r\n            console.log(\"data was valid, hooray!\");\r\n            console.log(data);\r\n            navigate(\"/\");\r\n        })\r\n\r\n    }, [])\r\n\r\n    const changeHandler = e => {\r\n        console.log(\"Handling changes\");\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const buttonHandler = e => {\r\n        console.log(\"Handing button\");\r\n        socket.emit(\"edit_pet\", {state: state, id: props.id});\r\n    }\r\n    return ( \r\n        <div>\r\n            <InfoBar tagline=\"Edit: \" extras={state.name} linkTo=\"/\" linkDesc=\"back to home\" />\r\n            <p>this is where pets get edited</p>\r\n            <PetInput state={state} changeHandler={changeHandler} buttonTag=\"Edit Pet\" clickHandler={buttonHandler} />\r\n            {errors.map((error, index) => \r\n                <p>{error} error number {index}</p>\r\n            )}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default EditPet;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Router } from '@reach/router';\r\n\r\nimport axios from 'axios';\r\nimport Dashboard from './pages/Dashboard';\r\nimport NewPet from './pages/NewPet';\r\nimport Detail from './pages/Detail';\r\nimport EditPet from './pages/EditPet';\r\n\r\nconst Main = () => {\r\n    const [state, setState] = useState(\"Loading Message!!!!\");\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/testRun\")\r\n            .then(res=>setState(res.data.message))\r\n            .catch(err=> console.log(err))\r\n    })\r\n    return ( \r\n        <div>\r\n            <h2>Connection Status: {state}</h2>\r\n            <h2>Pet Shelter</h2>\r\n            <Router>\r\n                <Dashboard path=\"/\" />\r\n                <NewPet path=\"/new\" />\r\n                <Detail path=\"/pets/:id\" />\r\n                <EditPet path=\"/pets/edit/:id\" />\r\n            </Router>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}